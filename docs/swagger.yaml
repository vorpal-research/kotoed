swagger: '2.0'
info:
  title: Kotoed
  version: 0.1.0
host: localhost
consumes:
  - application/json
produces:
  - application/json
paths:
  /eventbus/kotoed.api.course.create:
    post:
      description: Create a new course
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/CourseBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
  /eventbus/kotoed.api.course.read:
    post:
      description: Query a course by its id
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
    get:
      description: Query a course by its id
      parameters:
        - name: id
          in: query
          description: Primary key
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
  /eventbus/kotoed.api.project.create:
    post:
      description: Create a new project
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/ProjectBase'
      responses:
        '200':
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Project'
  /eventbus/kotoed.api.project.read:
    post:
      description: Query a project by its properties
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Project'
  /eventbus/kotoed.api.denizen.create:
    post:
      description: Create a new user
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/DenizenBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Denizen'
  /eventbus/kotoed.api.denizen.read:
    post:
      description: Query a user by their properties
      parameters:
        - in: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Denizen'
definitions:
  HasId:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        description: Primary key
  CourseBase:
    type: object
    properties:
      name:
        type: string
        description: Course name
      build_template_id:
        type: string
        description: >-
          TeamCity build template ID this course should use when building the
          submissions
      root_project_id:
        type: string
        description: TeamCity root project for the auto-created course project
  Course:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/CourseBase'
  ProjectBase:
    type: object
    properties:
      denizen_id:
        type: integer
        description: Foreign key to project owner
      course_id:
        type: integer
        description: Foreign key to project course
      repo_type:
        type: string
        enum:
          - hg
          - mercurial
          - git
        description: Project repository type
      repo_url:
        type: string
        description: Project repository url
      name:
        type: string
        description: Project name
  Project:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/ProjectBase'
  DenizenBase:
    type: object
    properties:
      id:
        type: integer
        description: Primary key
      denizen_id:
        type: string
        description: User name
      password:
        type: string
        description: User password
      salt:
        type: string
        description: Password salt
  Denizen:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/DenizenBase'
  DbRecordWrapper:
    type: object
    required:
      - verificationData
    properties:
      verificationData:
        $ref: '#/definitions/VerificationData'
      record:
        type: object
  VerificationData:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
        - Unknown
        - NotReady
        - Processed
      errors:
        type: array
        items:
          type: integer
