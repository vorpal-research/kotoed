swagger: '2.0'
info:
  title: Kotoed
  version: 0.1.0
host: localhost
consumes:
  - application/json
produces:
  - application/json
paths:
  /eventbus/kotoed.api.course.create:
    post:
      description: Create a new course
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CourseBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
  /eventbus/kotoed.api.course.read:
    post:
      description: Query a course by its id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a course by its id
      parameters:
        - name: id
          in: query
          description: Primary key
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Course'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
  /eventbus/kotoed.api.course.error:
    post:
      description: Get errors associated with a course
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/VerificationData'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Primary key
              course_id:
                type: integer
                description: The id of the course
              data:
                type: object
                description: Data associated with the event
  /eventbus/kotoed.api.project.create:
    post:
      description: Create a new project
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ProjectBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Project'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
  /eventbus/kotoed.api.project.read:
    post:
      description: Query a project by its id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Project'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a project by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Project'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
  /eventbus/kotoed.api.project.error:
    post:
      description: Get errors associated with a project
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/VerificationData'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Primary key
              project_id:
                type: integer
                description: The id of the project
              data:
                type: object
                description: Data associated with the event
  /eventbus/kotoed.api.denizen.create:
    post:
      description: Create a new user
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/DenizenBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Denizen'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
  /eventbus/kotoed.api.denizen.read:
    post:
      description: Query a user by its id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Denizen'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a user by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Denizen'
  /eventbus/kotoed.api.submission.create:
    post:
      description: Create a new user
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SubmissionBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Submission'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
  /eventbus/kotoed.api.submission.read:
    post:
      description: Query a submission by its id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Submission'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a submission by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Submission'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
  /eventbus/kotoed.api.submission.last:
    post:
      description: Query the last corresponding submission for any submission with this id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Submission'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a user by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/Submission'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
  /eventbus/kotoed.api.submission.comments:
    post:
      description: Query all submission comments by submission id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SubmissionComment'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a user by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SubmissionComment'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
  /eventbus/kotoed.api.submission.error:
    post:
      description: Get errors associated with a submission
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/VerificationData'
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: integer
                description: Primary key
              submission_id:
                type: integer
                description: The id of the submission
              data:
                type: object
                description: Data associated with the event
  /eventbus/kotoed.api.submission.comment.create:
    post:
      description: Create a new comment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/SubmissionCommentBase'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/SubmissionComment'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
  /eventbus/kotoed.api.submission.comment.read:
    post:
      description: Query a submission comment by its id
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/HasId'
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/SubmissionComment'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
    get:
      description: Query a submission comment by its id
      parameters:
        - in: query
          name: id
          type: integer
          description: Primary key
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/DbRecordWrapper'
              - properties:
                  record:
                    $ref: '#/definitions/SubmissionComment'
        '400':
          description: Incorrect request
          schema:
            $ref: '#/definitions/RequestError'
        '404':
          description: Entity not found
          schema:
            $ref: '#/definitions/NotFoundError'
definitions:
  ErrorEntity:
    type: object
    required:
      - success
      - error
      - code
    properties:
      success:
        type: boolean
        description: Is operation successful?
      error:
        type: string
        description: Error message
      code:
        type: integer
        description: Error code
      stacktrace:
        type: array
        items:
          type: string
        description: Optional stacktrace information for debugging
    additionalProperties:
      description: Supplemental information for additional types of errors
  NotFoundError:
    allOf:
      - $ref: '#/definitions/ErrorEntity'
      - properties:
          success:
            enum:
              - false
          code:
            enum:
              - 404
  RequestError:
    allOf:
      - $ref: '#/definitions/ErrorEntity'
      - properties:
          success:
            enum:
              - false
          code:
            enum:
              - 400
  UnknownError:
    allOf:
      - $ref: '#/definitions/ErrorEntity'
      - properties:
          success:
            enum:
              - false
          code:
            enum:
              - 500
  HasId:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        description: Primary key
  DbRecordWrapper:
    type: object
    required:
      - verificationData
    properties:
      verificationData:
        $ref: '#/definitions/VerificationData'
      record:
        type: object
  VerificationData:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - Unknown
          - NotReady
          - Processed
      errors:
        type: array
        default: []
        items:
          type: integer
  CourseBase:
    type: object
    required:
      - name
      - build_template_id
      - root_project_id
    properties:
      name:
        type: string
        description: Course name
      build_template_id:
        type: string
        description: >-
          TeamCity build template ID this course should use when building the
          submissions
      root_project_id:
        type: string
        description: TeamCity root project for the auto-created course project
  Course:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/CourseBase'
  ProjectBase:
    type: object
    required:
      - denizen_id
      - course_id
      - repo_type
      - repo_url
      - name
    properties:
      denizen_id:
        type: integer
        description: Foreign key to project owner
      course_id:
        type: integer
        description: Foreign key to project course
      repo_type:
        type: string
        enum:
          - hg
          - mercurial
          - git
        description: Project repository type
      repo_url:
        type: string
        description: Project repository url
      name:
        type: string
        description: Project name
  Project:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/ProjectBase'
  DenizenBase:
    type: object
    required:
      - denizen_id
      - password
      - salt
    properties:
      denizen_id:
        type: string
        description: User name
      password:
        type: string
        description: User password
      salt:
        type: string
        description: Password salt
  Denizen:
    allOf:
      - $ref: '#/definitions/HasId'
      - $ref: '#/definitions/DenizenBase'
  SubmissionBase:
    type: object
    required:
      - project_id
      - revision
    properties:
      parent_submission_id:
        type: integer
        default: null
        description: The id of previous version of this submission (if any)
      project_id:
        type: integer
        description: Reference to project id
      revision:
        type: string
        description: VCS revision bound to this submission.
  Submission:
    allOf:
      - $ref: '#/definitions/HasId'
      - type: object
        properties:
          datetime:
            type: integer
            description: Epoch value for this submission creation time
            default: now
          state:
            type: string
            enum:
              - pending
              - invalid
              - open
              - obsolete
              - closed
            default: pending
            description: Current state of this submission
      - $ref: '#/definitions/SubmissionBase'
  SubmissionCommentBase:
    type: object
    required:
      - submission_id
      - author_id
      - sourcefile
      - sourceline
      - text
    properties:
      submission_id:
        type: integer
        description: The id of the submission
      author_id:
        type: integer
        description: The denizen id of the author
      sourcefile:
        type: string
        description: Filename
      sourceline:
        type: integer
        description: Line number
      text:
        type: string
        description: Comment contents
      previous_comment_id:
        type: integer
        default: null
        description: The id of the comment this comment replies to (if any)
  SubmissionComment:
    allOf:
      - $ref: '#/definitions/HasId'
      - type: object
        properties:
          state:
            type: string
            enum:
              - open
              - closed
          persistent_comment_id:
            type: integer
            description: The unified id for all versions of a single comment
          original_submission_id:
            type: integer
            description: Id of submission for the first version of this comment
            default: submission_id
      - $ref: '#/definitions/SubmissionCommentBase'
